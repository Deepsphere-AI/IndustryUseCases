import re
import nltk
import pandas as pd
from nltk.corpus import stopwords
from google.cloud import bigquery
import google.cloud.bigquery.dbapi as bq

nltk.download('stopwords')
stop = stopwords.words('english')
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

with open('Text.txt') as f:
    string = f.readlines()
    
class InformationExtraction:    
    def __init__(self):
        self.bqclient = bigquery.Client()

    def extract_phone_numbers(self,string):
        s1 = [s+'.' for s in str(string).split('.') if 'phone number' in s]
        r = re.compile(r'(\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\(\d{3}\)\s*\d{3}[-\.\s]??\d{4})')
        phone_numbers = r.findall(str(string))
#         print("Phone Number-"+ str(s1))
        return [re.sub(r'\D', '', number) for number in phone_numbers]

    def extract_email_addresses(self,string):
        r = re.compile(r'[\w\.-]+@[\w\.-]+')
        return r.findall(str(string))

    def extract_adhar_number(self,string):
        r = re.compile(r'^[2-9]{1}[0-9]{3}\\s[0-9]{4}\\s[0-9]{4}$')
        return r.findall(str(string))

    def extract_age(self,string):
    #     r = re.compile(r'/(am\s)(\d{1,2})/')
        r = re.compile(r'\d+(?=[\s]?years)')
        return r.findall(str(string))
    
    def extract_date_of_birth(self,string):
        s1 = [s+'.' for s in str(string).split('.') if 'birth' in s]
#         r = re.compile(r'(\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\(\d{3}\)\s*\d{3}[-\.\s]??\d{4})')
#         phone_numbers = r.findall(str(string))
#         print("DOB is-"+ str(s1))
        return str(s1)
#         return [re.sub(r'\D', '', number) for number in phone_numbers]
    
    def extract_license(self,string):
#         r = re.compile(r'^(([A-Z]{2}[0-9]{2})( )|([A-Z]{2}-[0-9]{2}))((19|20)[0-9][0-9])[0-9]{7}$')
#         return r.findall(str(string))

        s1 = [s+'.' for s in str(string).split('.') if 'license' in s]
#         print("Driving License is-"+ str(s1))
        return str(s1)
        
        
    def extract_credit_card(self,string):
        s1 = [s+'.' for s in str(string).split('.') if 'credit card' in s]
#         print("credit card number is-"+ str(s1))
        return str(s1)
        
    def extract_security_number(self,string):
        s1 = [s+'.' for s in str(string).split('.') if 'security' in s]
#         print("social security number is-"+ str(s1))
        return str(s1)
        
    def ie_preprocess(self,string):
        string = ' '.join([i for i in str(string).split() if i not in stop])
        sentences = nltk.sent_tokenize(string)
        sentences = [nltk.word_tokenize(sent) for sent in sentences]
        sentences = [nltk.pos_tag(sent) for sent in sentences]
        return sentences

    def extract_names(self,document):

        names = []
        sentences = self.ie_preprocess(string)
        for tagged_sentence in sentences:
            for chunk in nltk.ne_chunk(tagged_sentence):
                if type(chunk) == nltk.tree.Tree:
                    if chunk.label() == 'PERSON':
                        names.append(' '.join([c[0] for c in chunk]))
        return names


    def write_dataframe(self,report):
        job_config = bigquery.LoadJobConfig()
        table_id = "airline_data.fact_transaction_booking_v2"
        job = self.bqclient.load_table_from_dataframe(
    report, table_id, job_config=job_config
)  # Make an API request.
        job.result()  # Wait for the job to complete.

        table = self.bqclient.get_table(table_id)  # Make an API request.
        print(
            "Loaded {} rows and {} columns to {}".format(
                table.num_rows, len(table.schema), table_id
            )
        )

    


def main():
    obj = InformationExtraction()
    names = obj.extract_names(string)
#     print("Full Name -" + str(names))
    phone = obj.extract_phone_numbers(string)
    dob = obj.extract_date_of_birth(string)
    dl = obj.extract_license(string)
    ccn = obj.extract_credit_card (string)
    emails = obj.extract_email_addresses(string)
#     if emails != None:
#         print("Email -"+ str(emails))
#     else:
#         print("Email not found")
    sn=obj.extract_security_number(string)

#     emails = obj.extract_email_addresses(string)
#     print(emails)
   
    age = obj.extract_age(string)
   
    table= {"Information":["Full_Name","Phone_Number","Email","DOB","Driving_License","Credit_Card_Number","Security_number"],
            "Extracted words":[names,phone,emails,dob,dl,ccn,sn],
            "Frequency":[len(names),len(phone),len(emails),len(dob),len(dl),len(ccn),len(sn)]}
     
    report = pd.DataFrame(table)
    print(report)

    obj.write_dataframe(report)


    
    report.to_csv("test.csv")

if __name__=="__main__":
    main()